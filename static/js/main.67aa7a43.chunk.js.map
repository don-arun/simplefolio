{"version":3,"sources":["components/login/login.js","components/register/register.js","components/home/home.js","App.js","serviceWorker.js","index.js"],"names":["Login","onInputChange","onRouteChange","className","type","name","placeholder","onChange","onClick","Register","Home","App","event","console","log","target","value","route","setState","state","input","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mSA2BeA,G,WAxBD,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,cAAcC,EAAoB,EAApBA,cAC3B,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,UACX,6BACI,sCAEJ,6BACI,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,WAAWH,UAAU,QAAQI,SAAUN,KAE1F,6BACI,2BAAOG,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAAWH,UAAU,WAE5E,6BACG,4BAAQC,KAAK,SAASD,UAAU,MAAMK,QAAS,kBAAKN,EAAc,UAAlE,UAEH,6BACI,mDAAwB,0BAAMM,QAAW,kBAAMN,EAAc,cAArC,kBCS7BO,EA1BC,SAAC,GAAqB,IAApBP,EAAmB,EAAnBA,cACd,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,QACX,6BACI,yCAEJ,6BACI,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,WAAWH,UAAU,WAExE,6BACI,2BAAOC,KAAK,QAAQC,KAAK,QAAQC,YAAY,QAAQH,UAAU,WAEnE,6BACI,2BAAOC,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAAWH,UAAU,WAE5E,6BACI,4BAAQC,KAAK,SAASD,UAAU,MAAMK,QAAS,kBAAKN,EAAc,UAAlE,iBCbTQ,EANF,WACT,OACI,qCCkCOC,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAOFV,cAAe,SAACW,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,QATb,EAYdd,cAAgB,SAACe,GACf,EAAKC,SAAS,CAACD,MAAOA,KAXtB,EAAKE,MAAQ,CACXC,MAAO,GACPH,MAAO,UAJG,E,qDAkBZ,OAAQ,yBAAKd,UAAU,OACC,SAArBkB,KAAKF,MAAMF,MACV,kBAAC,EAAD,MACsB,aAArBI,KAAKF,MAAMF,MACV,kBAAC,EAAD,CAAUf,cAAemB,KAAKnB,gBAC9B,kBAAC,EAAD,CAAOD,cAAeoB,KAAKpB,cAAeC,cAAemB,KAAKnB,qB,GAxBtDoB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.67aa7a43.chunk.js","sourcesContent":["import React from 'react';\r\nimport './login.css';\r\n\r\nconst Login = ({ onInputChange,onRouteChange }) => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"layout\">\r\n                <div>\r\n                    <h1>LOGIN</h1>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" name=\"username\" placeholder=\"username\" className=\"input\" onChange={onInputChange}></input>\r\n                </div>\r\n                <div>\r\n                    <input type=\"password\" name=\"password\" placeholder=\"password\" className=\"input\" ></input>\r\n                </div>\r\n                <div>\r\n                   <button type=\"button\" className=\"btn\" onClick={() =>onRouteChange('Home')} >login</button>    \r\n                </div>\r\n                <div>\r\n                    <p>Are you new to Here! <span onClick = {() => onRouteChange('Register') }>Register</span></p>\r\n                </div>\r\n            </div>\r\n        </div>  \r\n    );  \r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport '../login/login.css';\r\n\r\nconst Register =({onRouteChange}) => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"layout\">\r\n                <div className=\"cent\">\r\n                    <div>\r\n                        <h1>REGISTER</h1>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"text\" name=\"username\" placeholder=\"username\" className=\"input\" ></input>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"email\" name=\"email\" placeholder=\"email\" className=\"input\" ></input>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"password\" name=\"password\" placeholder=\"password\" className=\"input\" ></input>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn\" onClick={() =>onRouteChange('Home')}>register</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return(\r\n        <h1>HOME</h1>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport Login from './components/login/login';\nimport Register from './components/register/register';\nimport Home from './components/home/home';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      route: 'Signin',\n    }\n  }\n\n  onInputChange =(event)=> {\n    console.log(event.target.value);\n  }\n\n  onRouteChange = (route) => {\n    this.setState({route: route})\n  }\n\n\n  render() {\n    return (<div className=\"App\">\n      {this.state.route === 'Home' \n      ? <Home />\n      : (this.state.route === 'Register' \n        ? <Register onRouteChange={this.onRouteChange} />\n        : <Login onInputChange={this.onInputChange} onRouteChange={this.onRouteChange}/>\n      )\n      }\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}